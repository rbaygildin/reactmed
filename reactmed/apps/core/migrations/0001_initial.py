# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-10-06 17:06
from __future__ import unicode_literals

import apps.core.managers
import datetime
from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
from django.utils.timezone import utc


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.CharField(max_length=30, unique=True, verbose_name='Email')),
                ('name', models.CharField(max_length=30, verbose_name='Name')),
                ('surname', models.CharField(max_length=30, verbose_name='Surname')),
                ('patronymic', models.CharField(blank=True, max_length=30, null=True, verbose_name='Patronymic')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False, verbose_name='Is Staff')),
                ('date_joined', models.DateTimeField(default=datetime.datetime(2017, 10, 6, 17, 6, 37, 22888, tzinfo=utc))),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'user',
            },
            managers=[
                ('objects', apps.core.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('post_code', models.CharField(max_length=30, verbose_name='Post code')),
                ('country', models.CharField(max_length=100, verbose_name='Country')),
                ('region', models.CharField(max_length=100, verbose_name='Region')),
                ('city', models.CharField(max_length=100, verbose_name='City')),
                ('street', models.CharField(max_length=150, verbose_name='Street')),
            ],
            options={
                'verbose_name': 'Address',
                'verbose_name_plural': 'Addresses',
                'db_table': 'address',
            },
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('content', models.BinaryField()),
            ],
            options={
                'verbose_name': 'Attachment',
                'verbose_name_plural': 'Attachments',
                'db_table': 'attachment',
            },
        ),
        migrations.CreateModel(
            name='Diagnosis',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('diagnosis', models.TextField()),
                ('diagnosis_date', models.DateField()),
            ],
            options={
                'verbose_name': 'Diagnosis',
                'verbose_name_plural': 'Diagnosis',
                'db_table': 'diagnosis',
            },
        ),
        migrations.CreateModel(
            name='IntInd',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('short_name', models.CharField(blank=True, max_length=200, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('min_norm', models.IntegerField(blank=True, null=True)),
                ('max_norm', models.IntegerField(blank=True, null=True)),
                ('unit', models.CharField(blank=True, max_length=20, null=True)),
            ],
            options={
                'verbose_name': 'Integer Indicator',
                'verbose_name_plural': 'Integer Indicators',
                'db_table': 'int_ind',
            },
        ),
        migrations.CreateModel(
            name='MedArea',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('short_name', models.CharField(blank=True, max_length=200, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.MedArea')),
            ],
            options={
                'verbose_name': 'Medical Area',
                'verbose_name_plural': 'Medical Areas',
                'db_table': 'med_area',
            },
        ),
        migrations.CreateModel(
            name='Medication',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('summary', models.CharField(max_length=255)),
                ('info', models.TextField(blank=True, null=True)),
                ('drugs', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), size=None)),
                ('medication_date', models.DateField()),
            ],
            options={
                'verbose_name': 'Medication',
                'verbose_name_plural': 'Medications',
                'db_table': 'medication',
            },
        ),
        migrations.CreateModel(
            name='MedTest',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('short_name', models.CharField(blank=True, max_length=200, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('med_area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.MedArea')),
            ],
            options={
                'verbose_name': 'Medical Test',
                'verbose_name_plural': 'Medical Tests',
                'db_table': 'med_test',
            },
        ),
        migrations.CreateModel(
            name='OmiCard',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('number', models.CharField(max_length=16, verbose_name='Number')),
                ('expire_date', models.DateField(verbose_name='Expiration date')),
                ('insurance_org', models.CharField(max_length=150, verbose_name='Insurance Organization')),
            ],
            options={
                'verbose_name': 'OMI Card',
                'verbose_name_plural': 'OMI Cards',
                'db_table': 'omi_card',
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('surname', models.CharField(max_length=50, verbose_name='Surname')),
                ('patronymic', models.CharField(blank=True, max_length=50, null=True, verbose_name='Patronymic')),
                ('gender', models.CharField(choices=[('Мужской', 'мужской'), ('Женский', 'женский')], max_length=20, verbose_name='Gender')),
                ('birthday', models.DateField(verbose_name='Birthday')),
                ('blood_group', models.CharField(blank=True, choices=[('I', 'I'), ('II', 'II'), ('III', 'III'), ('IV', 'IV')], max_length=20, null=True, verbose_name='Blood Group')),
                ('rh_factor', models.CharField(blank=True, choices=[('Rh+', 'Rh+'), ('Rh-', 'Rh-')], max_length=20, null=True, verbose_name='RH Factor')),
                ('is_disabled', models.BooleanField(default=False, verbose_name='Disabled')),
                ('omi_card', models.CharField(blank=True, max_length=16, null=True, verbose_name='OMI Card')),
                ('address', models.CharField(blank=True, max_length=255, null=True, verbose_name='Address')),
                ('occupation', models.CharField(blank=True, max_length=100, null=True, verbose_name='Occupation')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patients', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Patient',
                'verbose_name_plural': 'Patients',
                'db_table': 'patient',
            },
        ),
        migrations.CreateModel(
            name='RealInd',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('short_name', models.CharField(blank=True, max_length=200, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('min_norm', models.FloatField(blank=True, null=True)),
                ('max_norm', models.FloatField(blank=True, null=True)),
                ('unit', models.CharField(blank=True, max_length=20, null=True)),
                ('med_test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='real_inds', to='core.MedTest')),
            ],
            options={
                'verbose_name': 'Real Indicator',
                'verbose_name_plural': 'Real Indicators',
                'db_table': 'real_ind',
            },
        ),
        migrations.CreateModel(
            name='TestRec',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('short_name', models.CharField(max_length=200)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('real_inds', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('int_inds', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('text_inds', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('summary', models.CharField(blank=True, max_length=100, null=True)),
                ('info', models.TextField(blank=True, null=True)),
                ('test_date', models.DateField()),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_recs', to='core.Patient')),
            ],
            options={
                'verbose_name': 'Test Record',
                'verbose_name_plural': 'Test Records',
                'db_table': 'test_rec',
            },
        ),
        migrations.CreateModel(
            name='TextInd',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('short_name', models.CharField(blank=True, max_length=200, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('values', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, null=True, size=None)),
                ('med_test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='text_inds', to='core.MedTest')),
            ],
            options={
                'verbose_name': 'Text Indicator',
                'verbose_name_plural': 'Text Indicators',
                'db_table': 'text_ind',
            },
        ),
        migrations.CreateModel(
            name='Treatment',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('start_date', models.DateField()),
                ('finish_date', models.DateField()),
                ('summary', models.CharField(max_length=255)),
                ('info', models.TextField(blank=True, null=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Patient')),
            ],
            options={
                'verbose_name': 'Treatment',
                'verbose_name_plural': 'Treatments',
                'db_table': 'treatment',
            },
        ),
        migrations.AddField(
            model_name='medication',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Patient'),
        ),
        migrations.AddField(
            model_name='intind',
            name='med_test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='int_inds', to='core.MedTest'),
        ),
        migrations.AddField(
            model_name='diagnosis',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Patient'),
        ),
        migrations.AddField(
            model_name='attachment',
            name='test_record',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.TestRec'),
        ),
    ]
